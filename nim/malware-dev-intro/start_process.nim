import winim

proc main(): int = 
    # BOOL CreateProcessW(
    #   [in, optional]      LPCWSTR               lpApplicationName,
    #   [in, out, optional] LPWSTR                lpCommandLine,
    #   [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,
    #   [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,
    #   [in]                BOOL                  bInheritHandles,
    #   [in]                DWORD                 dwCreationFlags,
    #   [in, optional]      LPVOID                lpEnvironment,
    #   [in, optional]      LPCWSTR               lpCurrentDirectory,
    #   [in]                LPSTARTUPINFOW        lpStartupInfo,
    #   [out]               LPPROCESS_INFORMATION lpProcessInformation
    # );
    
    var si: STARTUPINFOW
    var pi: PROCESS_INFORMATION

    # Create process
    if CreateProcessW(
        L"C:\\Windows\\System32\\notepad.exe",  # Path to executable
        nil,                                    # Command line arguments
        nil,                                    # Process attributes, if null, the handle to the process cannot be inherited by child processes
        nil,                                    # Thread attributes, if null, the handle to the thread object cannot be inherited by child processes
        false,                                  # Inherit handles: if true, the new process inherits the handles of the calling process
        NORMAL_PRIORITY_CLASS,                  # Process creation flags, process priority (https://learn.microsoft.com/en-us/windows/win32/procthread/process-creation-flags)
        nil,                                    # Pointer to environment block, if null, the environment of the calling process is used
        nil,                                    # Current directory, if null, the current directory of the calling process is used
        &si,                                    # Pointer to Startup information
        &pi                                    # Pointer to Process information
    ) == 0: 
        echo "[-] Failed to create process: ", GetLastError()
        return ERROR

    echo "[+] Process created"
    echo "    [*] Process ID:", pi.dwProcessId
    echo "    [*] Thread ID:", pi.dwThreadId
    echo "    [*] Process handle:", pi.hProcess
    echo "    [*] Thread handle:", pi.hThread

    # Wait until child process exits.
    WaitForSingleObject(pi.hProcess, INFINITE)
    echo "[+] Process finished"

    # Close process and thread handles.
    CloseHandle(pi.hProcess)
    echo "[+] Process handle closed"
    CloseHandle(pi.hThread)
    echo "[+] Thread handle closed"

    return SUCCESS

when isMainModule:
    discard main()
